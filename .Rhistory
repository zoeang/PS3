X<-diag(nrow=4)# this will be used as the argument
a<-sample(1:100,4)
scoresvec<-X%*%a
sort.student<- function(name,X=diag(nrow=4)){#set default X
a<-sample(1:100,4) # a is a vector of the attributes
score<-X%*%a##calculate X^ta
if(max(scoresvec)==scoresvec[1]){# if the first value of score is largest, gryffindor
print("GRYFFINDOR!")
} else if(max(scoresvec)==scoresvec[2]){#if the second value of score is largest, slytherin
print("SLYTHERIN!")
} else if ((max(scoresvec)==scoresvec[3])){#if the third value of score is largest, ravenclaw
print('RAVENCLAW!')
} else if (max(scoresvec)==scoresvec[4]){#if the fourth value of score is largest, hufflepuff
print("Hufflepuff...")
}
}
sort(name)
sort("Zoe")
sort.student("Zoe")
nameclass<-function(name){
class(name1)<-c("student", sort.student(name))
class(name1)
}
nameclass("Zoe")
nameclass<-function(name){
class(name)<-c("student", sort.student(name))
}
nameclass("Zoe")
sort.student("Zoe")
nameclass<-function(name){
class(sort.student(name))<-c("student", sort.student(name))
}
nameclass("Zoe")
nameclass<-function(name){
class(name)<-c("student", sort.student(name))
}
nameclass("Zoe")
class("Zoe")
Zoe<-"Zoe"
nameclass<-function(name){
class(name)<-c("student", sort.student(name))
}
nameclass(Zoe)
class(Zoe)
name
Zoe
Zoe<-SortingHat("Zoe")
Zoe
sort.student(Zoe)
class(Zoe)
class(Zoe)<-c("student", sort.student(name))
class(Zoe)
nameclass<-function(nameofstudent){
class(nameofstudent)<-c("student", sort.student(name))
}
nameclass(Zoe)
class(Zoe)
Zoe
class(Zoe)[2]
class(Zoe)[[2]]
curfew.Gryffindor<-function(yourname){
nameclass(yourname)
if (class(yourname)[[2]] %in% c("GRYFFINDOR!")){
Gryffindor_Tower<-yourname
} else{
print("Intruder alert!")
}
}
curfew.Gryffindor(Zoe)
setClass("doors",
slots=list(pick="numeric")
)
simdoor<-new("doors", pick=1)
simdoor
setClass("doors",
contains="numeric"
)
simdoor<-new("doors", pick=1)
simdoor<-new("doors", 1)
simdoor
setValidity("doors", function(object){
test<-all(object[1]==1 | object[1]==2 |object[1]==3)
if(!test==object){
print("Not a valid value")
}
}
)
setValidity(4)
setValidity(simdoor)
object=4
object[1]==1
object[1]==2
object[1]==1 | object[1]==2
all(object[1]==1 | object[1]==2 |object[1]==3)
test<-all(object[1]==1 | object[1]==2 |object[1]==3)
!test==object
setMethod("PlayGame", "door", function(x){
#x is a number 1, 2, or 3 chosen by the player
car<-sample(1:3,1) #this will randomly assign a number to car
if(x==car){ #if loop to test if the player's number is the car door
print("Congratulations! You picked the correct door")
} else {
print("Enjoy your goat!")
}
}
)
